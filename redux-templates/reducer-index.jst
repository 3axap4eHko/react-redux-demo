{__warning_header}
'use strict';

import {
    NAMESPACE,
<% eachEntity(entities, entity => { %>
    {entity.TYPE},
<% } ) %>
} from './{typePath}';

<% if (defaultStatePath) {%>import defaultState from '{defaultStatePath}';<% } else { %>const defaultState = {};<% } %>

<% eachEntity(entities, entity => { %>
import {entity.fullName} from './{entity.path}';
<% } ) %>

const reducers = {
<% _.forEach(entities, (group, namespace) => { %>
    [NAMESPACE.{namespace}]: {
<% _.forEach(group, entity => { %>
        [{entity.TYPE}]: {entity.fullName},
<% } ) %>
    },
<% } ) %>
};

export default function(state = defaultState, action) {
    const {namespace, type} = action;
    if ( state && state.has(namespace) && namespace in reducers ) {
        const prevNamespaceState = state.get(namespace);
        if ( type in reducers[namespace] ) {
            const nextNamespaceState = reducers[namespace][type](prevNamespaceState, action);
            if (typeof nextNamespaceState === 'undefined') {
                throw new Error(`State ${<%  %>namespace} can't be undefined`);
            }
            return state.set(namespace, nextNamespaceState);
        } else {
            throw new Error(`Entity ${<%  %>namespace}.${<%  %>type} not defined`);
        }
    }
    return state;
};