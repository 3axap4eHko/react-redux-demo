/*! Generated by redux-scfld not for editing */
'use strict';

import {
    NAMESPACE,
    PROGRESS,
    SUCCESS,
    FAILURE,

    POST_FETCH,

    POSTS_FETCH,

} from '../types';


import postFetchAction from './post/fetch.js';

import postsFetchAction from './posts/fetch.js';



function createPostFetchProgress(...args) {
    return {
        namespace: NAMESPACE.post,
        type: POST_FETCH,
        status: PROGRESS,
        args
    };
}
function createPostFetchSuccess(result) {
    return {
        namespace: NAMESPACE.post,
        type: POST_FETCH,
        status: SUCCESS,
        result
    };
}
function createPostFetchFailure(error) {
    return {
        namespace: NAMESPACE.post,
        type: POST_FETCH,
        status: FAILURE,
        error
    };
}

export const postFetch = (...args) => {
    return (dispatch, getState) => {
        dispatch( createPostFetchProgress(...args) );
        return Promise.resolve( postFetchAction(getState, ...args) )
            .then( result => dispatch(createPostFetchSuccess(result)) )
            .catch( error => dispatch(createPostFetchFailure(error)) );
    }
};

function createPostsFetchProgress(...args) {
    return {
        namespace: NAMESPACE.posts,
        type: POSTS_FETCH,
        status: PROGRESS,
        args
    };
}
function createPostsFetchSuccess(result) {
    return {
        namespace: NAMESPACE.posts,
        type: POSTS_FETCH,
        status: SUCCESS,
        result
    };
}
function createPostsFetchFailure(error) {
    return {
        namespace: NAMESPACE.posts,
        type: POSTS_FETCH,
        status: FAILURE,
        error
    };
}

export const postsFetch = (...args) => {
    return (dispatch, getState) => {
        dispatch( createPostsFetchProgress(...args) );
        return Promise.resolve( postsFetchAction(getState, ...args) )
            .then( result => dispatch(createPostsFetchSuccess(result)) )
            .catch( error => dispatch(createPostsFetchFailure(error)) );
    }
};

