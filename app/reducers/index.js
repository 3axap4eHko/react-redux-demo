/*! Generated by redux-scfld not for editing */
'use strict';

import errorRaise from './error/raise.js';
import errorReset from './error/reset.js';
import messageHide from './message/hide.js';
import messageShow from './message/show.js';
import postFetch from './post/fetch.js';
import postReset from './post/reset.js';
import postsFetch from './posts/fetch.js';
import postsReset from './posts/reset.js';

const namespaceReducersMap = {

    error: {
        ERROR_RAISE: errorRaise,
        ERROR_RESET: errorReset
    },

    message: {
        MESSAGE_HIDE: messageHide,
        MESSAGE_SHOW: messageShow
    },

    post: {
        POST_FETCH: postFetch,
        POST_RESET: postReset
    },

    posts: {
        POSTS_FETCH: postsFetch,
        POSTS_RESET: postsReset
    },

};

import defaultState from '../states';

export default function(state = defaultState, action) {
    const {namespace, type} = action;
    if ( state && namespace in namespaceReducersMap ) {
        const prevNamespaceState = state.get(namespace);
        if ( type in namespaceReducersMap[namespace] ) {
            const nextNamespaceState = namespaceReducersMap[namespace][type](prevNamespaceState, action);
            if (typeof nextNamespaceState === 'undefined') {
                throw new Error(`State from ${namespace}.${type} cannot be undefined`);
            }
            if (prevNamespaceState !== nextNamespaceState) {
                return state.set(namespace, nextNamespaceState);
            }
        } else {
            throw new Error(`Entity ${namespace}.${type} not defined`);
        }
    }
    return state;
};